import os
from string import Template
import cv2
import requests
from dotenv import load_dotenv

load_dotenv()


class Task:
    def __init__(self) -> None:
        self.__task_id = None
        self.__task = None
        self.__server_address = None
        self.__server_port = None
        self.__camera_capture = None
        self.__requests_address = Template("http://$address:$port/$action/")

    def start(self, config: dict = None) -> None:
        if config is None:
            self.__task_id = os.getenv("TASK_ID", "-1")
            self.__server_address = os.getenv("SERVER_ADDRESS", "127.0.0.1")
            self.__server_port = os.getenv("SERVER_PORT", "8000")
            camera_url = os.getenv("CAMERA_URL")
            if camera_url:
                self.__camera_capture = cv2.VideoCapture(camera_url)
            else:
                raise Exception("CAMERA_ID не задан в переменных окружения.")
        else:
            self.__task_id = config.get("task_id", "-1")
            self.__server_address = config.get("server_address", "127.0.0.1")
            self.__server_port = str(config.get("server_port", "8000"))
            camera_url = config.get("camera_url")
            if camera_url:
                self.__camera_capture = cv2.VideoCapture(camera_url)
            else:
                raise Exception("camera_url не передан в конфигурации.")

        if not self.__camera_capture.isOpened():
            raise Exception("Нет доступа к камере.")

        url = self.__requests_address.substitute(
            address=self.__server_address,
            port=self.__server_port,
            action="start_task"
        )
        response = requests.get(url, params={'task_id': self.__task_id})
        self.__task = response.text

    def getTask(self) -> str:
        return self.__task

    def getTaskScene(self) -> list:
        ret, frame = self.__camera_capture.read()
        if ret:
            return [frame]
        else:
            return []

    def checkCargoDemand(self) -> list:
        if not self.__task_id:
            raise Exception("Task not started. Call start(task_id) first.")
        url = self.__requests_address.substitute(
            address=self.__server_address,
            port=self.__server_port,
            action="check_cargo_demand"
        )
        response = requests.get(url, params={'task_id': self.__task_id})
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Error checking cargo demand: {response.text}")

    def cargoDelivered(self, cargo_id: str, unload_zone_id: str) -> dict:
        if not self.__task_id:
            raise Exception("Task not started. Call start(task_id) first.")
        url = self.__requests_address.substitute(
            address=self.__server_address,
            port=self.__server_port,
            action="cargo_delivered"
        )
        params = {
            "task_id": self.__task_id,
            "cargo_id": cargo_id,
            "unload_zone_id": unload_zone_id
        }
        response = requests.get(url, params=params)
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Error marking cargo delivered: {response.text}")

    def stop(self) -> None:
        if self.__camera_capture:
            self.__camera_capture.release()
            url = self.__requests_address.substitute(
                address=self.__server_address,
                port=self.__server_port,
                action="stop_task"
            )
            # requests.get(url, params={'task_id': self.__task_id})
        print("Task stopped.")


if __name__ == "__main__":
    import unittest


    class TestNTOAPIFinal(unittest.TestCase):
        def setUp(self) -> None:
            config = {
                "camera_url": "http://root:admin@10.128.73.50/mjpg/video.mjpg",
                "server_address": "localhost",
                "server_port": 8000,
                "task_id": 1
            }
            self.task = Task()
            self.task.start(config)
            return super().setUp()

        def test_get_task(self):
            print("Task:", self.task.getTask())

        def test_get_task_scene(self):
            scene = self.task.getTaskScene()
            print("Captured scene:", len(scene), "frame(s)")


    unittest.main()


